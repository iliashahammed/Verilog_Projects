typedef bit signed [32:0] typbit;

module ALU; 
  
  typbit A, B, Sum, difference, product, quotient, remainder;  
  
  int i, j;
  
  //create a function for addition:
  function automatic typbit sum (int a1, b1);
    sum = a1+b1;
  endfunction
  
  //create a function to make 2's complement of a number which can be used later:
  function automatic int twos_complement(typbit x);
      x = ~x;
    x = sum(x,1);
    return x;
  endfunction
  
  //create a function for substraction:
  function automatic typbit sub (int a2, b2);
    b2 = twos_complement(b2);
    sub = sum(a2, b2);
  endfunction
  
  //create a function for multiplication:
  function automatic typbit mul (int a3, b3);
    mul= 0;
    if(b3<0) begin
      b3 = twos_complement(b3);
      a3 = twos_complement(a3);
    end
    for(i=0; i<b3; i=i+1) begin
      mul = sum(mul,a3);
    end
    return mul;    
   endfunction
  
  //create a function for division:
  function automatic typbit div (int a4, b4);
    j = 0;
    
    //condition-1:
    if(b4<0 && a4>0 && a4>=twos_complement(b4)) begin
      b4 = twos_complement(b4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
    j++;
    end
    quotient = twos_complement(j);
    remainder = a4;
    end
    
    //condition-2:
    else if(a4<0 && b4>0 && b4<=twos_complement(a4)) begin
      a4 = twos_complement(a4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
      j++;
      end
      quotient = twos_complement(j);
      remainder = a4;
    end
    
    //condition-3:
    else if(b4<0 && a4>0 && a4<twos_complement(b4)) begin
      b4 = twos_complement(b4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
      j++;
      end
      quotient = twos_complement(j);
      remainder = a4;
    end
    
    //condition-4:
    else if(a4<0 && b4>0 && b4>twos_complement(a4)) begin
      a4 = twos_complement(a4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
      j++;
      end
      quotient = twos_complement(j);
      remainder = twos_complement(a4);
    end
    
    //condition-5:
    else if(a4<0 && b4<0 && twos_complement(a4)<twos_complement(b4)) begin
      a4 = twos_complement(a4);
      b4 = twos_complement(b4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
      j++;
      end
      quotient = j;
      remainder = twos_complement(a4);
    end
    
    //condition-6:
    else if(a4<0 && b4<0 && twos_complement(a4)>twos_complement(b4)) begin
      a4 = twos_complement(a4);
      b4 = twos_complement(b4);
      while(a4>=b4) begin
        a4 = sub(a4,b4);
      j++;
      end
      quotient = j;
      remainder = twos_complement(a4);
    end
    
    //condition-7:
    else if(a4>0 && b4>0 && a4<b4) begin
      while(a4>=b4) begin
        a4 = sub(a4,b4);
        j++;
      end
      quotient = j;
      remainder = a4;
    end
    
     //condition-8:
    else if(a4==0 && (b4>0||b4<0)) begin
      quotient = j;
      remainder = a4;
    end

    //condition-9:
    else if((a4>0||a4<0||a4==0) && b4==0) begin
      if(a4==0 && b4==0) begin
        $display("Division: Undefined! Zero can't be divided by Zero.");
      end
      else begin
        $display("Division: Undefined! a number can't be divided by zero.");
      end
    end
    
    //condition-10:
    else begin
      while(a4>=b4) begin
        a4 = sub(a4,b4);
        j++;
      end
      quotient = j;
      remainder = a4;
    end
    
  endfunction   
  //End of function creation.
  
  //Now initialize inputs and display results of all functions:
  initial begin     
    
    A = 25; 
    B = 5; 
    
    Sum = sum(A, B); //sum function is called for display addition.   
    $display("Summation = %0d",Sum);
    
    difference = sub(A, B); //sub function is called for display substraction (A-B).
    $display("Substraction(A-B) = %0d",difference);
    
    difference = sub(B, A); //sub function is called for display substraction (B-A).
    $display("Substraction(B-A) = %0d",difference);
    
    product = mul(A, B);  //mul function is called for display multiplication.
    $display("Product = %0d",product);
    
    div(A, B);  //div function is called for display division.
    if(B!=0) begin
      $display("Division: Quotient = %0d | Remainder = %0d", quotient, remainder);
    end
   
    #1;
    $finish;
  end
 endmodule
